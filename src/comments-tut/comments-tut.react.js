var React = require("react");
var ReactDOM = require("react-dom");
var $ = require('jquery');
var marked = require('marked');

var CommentBox = React.createClass({
    getInitialState: function() {
        return {data: []}
    },
    // Ajax call to retrieve JSON from the server
    loadCommentsFromServer: function () {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            // Comment Box UI will automatically updated when state changes
            // Note: CommentBox object owns the state data, not the comment list(!!)
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString())
            }.bind(this)
        });
    },
    handleCommentSubmit: function (comment) {
        // Optimistically add this comment to the list before the request completes to make the app feel faster.
        var existingComments = this.state.data;
        var newComments = existingComments.concat([comment]);
        this.setState({data: newComments});

        // Call the server to post the new comment
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                // React knows to update the view when internal state changes!
                this.setState({data: data});
            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    // Executed when the comment box is rendered
    componentDidMount: function() {
        this.loadCommentsFromServer();
        // Sets a sort of CRON job to poll the server after the first comment load
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data}/>
                <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
            </div>
        );
    }
});

var CommentList = React.createClass({
    render: function() {
        var commentNodes = this.props.data.map(function(comment) {
            return (
                <Comment author={comment.author}>
                    {comment.text}
                </Comment>
            );
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});

var CommentForm = React.createClass({
    handleSubmit: function(e) {
        // Stop the browser from actually submitting the form
        e.preventDefault();
        var author = this.refs.author.value.trim();
        var text = this.refs.text.value.trim();
        if(!text || !author) {
            return;
        }
        // Callback passed in from CommentBox
        this.props.onCommentSubmit({author: author, text: text});
        this.refs.author.value = '';
        this.refs.text.value = '';
        return;
    },
    render: function() {
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
                <input type="text" placeholder="Your name" ref="author" />
                <input type="text" placeholder="Say something..." ref="text" />
                <input type="submit" value="Post" />
            </form>
        );
    }
});

var Comment = React.createClass({
    render: function() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup()} />
            </div>
       );
    },
    /* Do this so that HTML generated by markdown will not be escaped by React's XSS protection */
    rawMarkup: function() {
        var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
        return { __html: rawMarkup };
    }
});

ReactDOM.render(
    <CommentBox url="http://localhost:3000/api/comments" pollInterval={2000}/>,
    document.getElementById('content')
);